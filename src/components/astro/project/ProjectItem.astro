---
import type { CollectionEntry } from 'astro:content'
import FormattedDate from '@/components/astro/shared/utils/FormattedDate.astro'
import { getEntries } from 'astro:content'
import ProjectHeading from './ProjectHeading.astro'
import ProjectTag from './ProjectTag.astro'

type Props = {
  project: CollectionEntry<'project'>
  class?: string
  isSubProject?: boolean
}

const { project, isSubProject } = Astro.props
const { title, url, role, dateStart, dateEnd, subProjects, tags }
  = project.data

const projects = subProjects ? await getEntries(subProjects) : []

const { Content } = await project.render();
---

<div
  class="relative"
  id={project.slug}
  class:list={[
    Astro.props.class,
    { 'p-8 sm:p-5 bg-white rounded-3xl page': !isSubProject }
  ]}
>
  {
    dateStart && dateEnd && (
      <div class="inline-block font-medium text-base px-3 py-0.5 text-white bg-gradient-to-bl from-zinc-900 to-zinc-700 rounded">
        <FormattedDate date={dateStart} /> - <FormattedDate date={dateEnd} />
      </div>
    )
  }
  <ProjectHeading level={isSubProject ? 3 : 2} class="mb-1">
    {title}
    {role && ` (${role})`}
  </ProjectHeading>
  {
    url
    && (url.includes('http')
        ? (
          <a href={url} target="_blank" class="hover:text-primary">
            ðŸ”—{url}
        </a>
        )
        : (
        <a href={url} class="hover:text-primary">
          ðŸ”—{Astro.url.origin}{url}
        </a>
      ))
  }
  {Content && <Content />}
  {
    tags && (
      <div class="flex flex-wrap gap-2 items-center mt-6">
        {tags.map(tag => (
          <ProjectTag name={tag} />
        ))}
      </div>
    )
  }
  {
    !!(projects && projects.length) && (
      <div>
        {projects.map(project => (
          <Astro.self
            project={project}
            isSubProject={true}
            class="pb-8 mb-6 border-b-2 border-zinc-200 last:mb-0 last:border-b-0 last:pb-0"
          />
        ))}
      </div>
    )
  }
</div>
